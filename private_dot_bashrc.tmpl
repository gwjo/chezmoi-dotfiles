# vim: ft=bash sw=2 ts=2 sts=2
#
# NOTE: this file invokes .alias (see bottom of this file)
#
#

# Check for an interactive session
[[ -z "$PS1" ]] && return


######################################################################
# Make the first call on the local settings file
######################################################################

[[ -f ~/.bashrc.local ]] && . ~/.bashrc.local pre


# Generic shell settings
[[ -f ~/.envrc.skip.direnv  ]] && source ~/.envrc.skip.direnv   # order matters !
[[ -f ~/.pathrc ]] && source ~/.pathrc
[[ -f ~/.alias  ]] && source ~/.alias

############
##
## GENERNAL OPTIONS
##

# Command line edit mode is emacs
set -o emacs
#set -i vi

# Prevent file overwrite on stdout redirection
# Use '>|" to force redirection to an existing file
set -o noclobber

# Update window size after every command
shopt -s checkwinsize

# Automatically trim long paths in the prompt
PROMPT_DIRTRIM=2

# Enable history expansion with space
# eg typing !!<space> will replace !! with you last command
#bind Space:magic-space

# Turn on recursive globbing (enables ** to recurse all directories)
shopt -s globstar 2> /dev/null

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob;

# Turn on extended globing
shopt -s extglob

############
##
## SMARTER TAB-COMPLETION (readline bindings)
##

# Perform file completion in a case insensitive fashion
bind "set completion-ignore-case on"

# Treat hyphens and underscores as equivalent
bind "set completion-map-case on"

# Display matches for ambiguous patters at first tab press
bind "set show-all-if-ambiguous on"

# Immediately add a trailing slash when autocompleting symlinks to directories
bind "set mark-symlinked-directories on"

############
##
## SANE HISTORY DEFAULTS
##


# Append to the history file
shopt -s histappend

# Save multi-line commands as one command
shopt -s cmdhist

# Record each line as it gets issued
PROMPT_COMMAND='history -a'

# Huge history. Doesn't appear to slow things down, so why not?
HISTSIZE=500000
HISTFILESIZE=100000

# Avoid duplicate entries
HISTCONTROL="erasedups:ignoreboth"

# Don't record some commands
export HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history?( *):fc?( *):clear"

# Use standard ISO 8601 timestamp
# %F equivalent to %Y-%m-%d
# %T equivalent to %H:%M:%S (24-hours format)
HISTTIMEFORMAT='%F %T '

# Enable incremental history search with up/down arrows (also Readline goodness)
# Learn more about this here: http://codeinthehole.com/writing/the-most-important-command-line-tip-incremental-history-searching-with-inputrc/
#bind '"\e[A": history-search-backward'
#bind '"\e[B": history-search-forward'
#bind '"\e[C": forward-char'
#bind '"\e[D": backward-char'

############
##
## BETTER DIRECTOY NAVIGATION
##

# Prepend cd to directory names automatically
shopt -s autocd 2> /dev/null
# Correct spelling errors during tab-completion
shopt -s dirspell 2> /dev/null
# Correct spelling errors in arguments supplied to cd
shopt -s cdspell 2> /dev/null

# This defines where cd looks for targets
# Add the directories you want to have fast access to, separated by colon
# Ex: CDPATH=".:~:~/projects" will look for targets in the current working directory, in home and in the ~/projects folder
CDPATH="."

# This allows you to bookmark your favorite places across the file system
# Define a variable containing a path and you will be able to cd into it regardless of the directory you're in
shopt -s cdable_vars



#############
##
## functions

_load_bash_files () {

  subdir="${HOME}/${1}"
  if [ -d "${subdir}" ]
  then
    FILES="${subdir}/*.bash"
    for func_file in $FILES
    do
      if [ -e ${func_file} ] ; then
        source ${func_file}
      fi
    done
  fi
}


refresh-completions () { _load_bash_files ".completions"; }
refresh-functions ()   { _load_bash_files ".functions"; }
refresh ()             { source ~/.bashrc; }

# Load files
refresh-functions
refresh-completions


##
##  PROMPT
##
if type -f starship &>/dev/null ; then
  eval "$(starship init bash)"
elif [[ -f /usr/share/git-core/contrib/completion/git-prompt.sh ]]; then
  GIT_PS1_SHOWDIRTYSTATE=1
  GIT_PS1_SHOWUPSTREAM="auto"
  GIT_PS1_SHOWCOLORHINTS=1
  source /usr/share/git-core/contrib/completion/git-prompt.sh
  PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '
fi

# Need for a xterm & co if we don't make a -ls
[[ -n $DISPLAY ]] && {
        [ -f /etc/profile.d/color_ls.sh ] && source /etc/profile.d/color_ls.sh
         export XAUTHORITY=$HOME/.Xauthority
}

# Read first /etc/inputrc if the variable is not defined, and after the /etc/inputrc
# include the ~/.inputrc
[[ -z $INPUTRC ]] && export INPUTRC=/etc/inputrc

# Source global definitions
[[ -f /etc/bashrc ]] && source /etc/bashrc



## {{- if eq .chezmoi.os "darwin" }}
## MacOS settings
##

# iterm2 integration
[[ -e "${HOME}/.iterm2_shell_integration.bash" ]] && source "${HOME}/.iterm2_shell_integration.bash"

## {{- end }}

##
## Brew specifics
##
if type brew &>/dev/null; then

  # completions
  HOMEBREW_PREFIX="$(brew --prefix)"
  if [[ -r "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]]; then
    BASH_COMPLETION_COMPAT_DIR="${HOMEBREW_PREFIX}/etc/bash_completion.d/"
    source "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
  else
    for COMPLETION in "${HOMEBREW_PREFIX}/etc/bash_completion.d/"*; do
      [[ -r "$COMPLETION" ]] && source "$COMPLETION"
    done
  fi

  # command-not-found
  if brew command command-not-found-init > /dev/null 2>&1; then
    eval "$(brew command-not-found-init)";
  fi
fi

##
## chezmoi completions - if manually installed
##
[[ -f ~/bin/chezmoi ]] && eval "$(~/bin/chezmoi completion bash)"


##
## thefuck setup
##
[[ $(type -p thefuck) ]] && eval "$(thefuck --alias)"


##
## fasd setup
##

if type -p fasd &>/dev/null ; then
  fasd_cache="$HOME/.fasd-init-bash"
  if [ "$(command -v fasd)" -nt "$fasd_cache" -o ! -s "$fasd_cache" ]; then
    fasd --init posix-alias bash-hook bash-ccomp bash-ccomp-install >| "$fasd_cache"
  fi
  source "$fasd_cache"
  unset fasd_cache
fi


##
## fzf settings
##

if [[ -f ~/.fzf.bash ]] ; then
  source ~/.fzf.bash

  # Use fd (https://github.com/sharkdp/fd) instead of the default find
  # command for listing path candidates.
  # - The first argument to the function ($1) is the base path to start traversal
  # - See the source code (completion.{bash,zsh}) for the details.
  _fzf_compgen_path() {
    fd --hidden --follow --exclude ".git" . "$1"
  }

  # Use fd to generate the list for directory completion
  _fzf_compgen_dir() {
    fd --type d --hidden --follow --exclude ".git" . "$1"
  }

  # usage: _fzf_setup_completion path|dir|var|alias|host COMMANDS...
  _fzf_setup_completion path ag git
  _fzf_setup_completion dir tree

fi

##
## pet command
##

if type -p pet &>/dev/null ; then
  function prev() {
    local PREV=$(fc -lrn -1)
    sh -c "pet new `printf %q "$PREV"`"
  }

  function pet-select() {
    local BUFFER=$(pet search --query "$READLINE_LINE")
    READLINE_LINE=$BUFFER
    READLINE_POINT=${#BUFFER}
  }

  bind -x '"\C-x\C-r": pet-select'
fi

##
## direnv
##

if type -p direnv &>/dev/null ; then
  eval "$(direnv hook bash)"
fi

######################################################################
# Make the last call on the local settings file
######################################################################

[[ -e ~/.bashrc.local ]] && . ~/.bashrc.local post
